>>> make pytest
  ‚óè Executing pytest in enrobie..
============================= test session starts ==============================
platform linux -- Python 3.12.9, pytest-8.3.5, pluggy-1.5.0 -- /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3
cachedir: .pytest_cache
Using --randomly-seed=3261745665
rootdir: /home/runner/work/enrobie/enrobie/main
configfile: pyproject.toml
plugins: respx-0.22.0, sphinx-0.6.3, clarity-1.0.1, cov-6.0.0, mypy-0.10.3, randomly-3.16.0, anyio-4.9.0, xdist-3.6.1, mock-3.14.0
created: 4/4 workers
4 workers [257 items]

scheduling tests via LoadScheduling

enrobie/clients/mattermost/test/test_client.py::test_MTMClient_command 
enrobie/utils/test/test_states.py::test_ClientChannels_basics 
enrobie/plugins/logger/test/test_history.py::test_LoggerHistory 
enrobie/robie/test/test_robie.py::test_Robie_person 
[gw0] [  0%] PASSED enrobie/utils/test/test_states.py::test_ClientChannels_basics 
enrobie/utils/test/test_states.py::test_ClientChannels_cover 
[gw0] [  0%] PASSED enrobie/utils/test/test_states.py::test_ClientChannels_cover 
enrobie/utils/test/test_states.py::test_ClientPublish 
[gw0] [  1%] PASSED enrobie/utils/test/test_states.py::test_ClientPublish 
enrobie/utils/test/test_states.py::test_ClientChannels 
[gw0] [  1%] PASSED enrobie/utils/test/test_states.py::test_ClientChannels 
enrobie/robie/threads/test/test_thread.py::test_RobieThread_cover 
[gw1] [  1%] ERROR enrobie/plugins/logger/test/test_history.py::test_LoggerHistory 
enrobie/robie/models/test/test_message.py::test_RobieMessage 
[gw0] [  2%] ERROR enrobie/robie/threads/test/test_thread.py::test_RobieThread_cover 
[gw2] [  2%] ERROR enrobie/clients/mattermost/test/test_client.py::test_MTMClient_command 
enrobie/execution/test/test_service.py::test_arguments 
[gw2] [  3%] PASSED enrobie/execution/test/test_service.py::test_arguments 
enrobie/plugins/ainswer/test/test_ainswer.py::test_AinswerQuestion_prompt[random_privmsg-privmsg-:nick!user@host PRIVMSG ircbot :Hello ircbot] 
[gw3] [  3%] ERROR enrobie/robie/test/test_robie.py::test_Robie_person 
enrobie/robie/test/test_robie.py::test_Robie 
enrobie/utils/test/test_importer.py::test_importer 
[gw0] [  3%] PASSED enrobie/utils/test/test_importer.py::test_importer 
enrobie/robie/members/test/test_clients.py::test_RobieClients 
[gw1] [  4%] ERROR enrobie/robie/models/test/test_message.py::test_RobieMessage 
enrobie/clients/irc/test/test_client.py::test_IRCClient_channels 
[gw0] [  4%] ERROR enrobie/robie/members/test/test_clients.py::test_RobieClients 
enrobie/robie/members/test/test_clients.py::test_RobieClients_cover 
[gw2] [  5%] ERROR enrobie/plugins/ainswer/test/test_ainswer.py::test_AinswerQuestion_prompt[random_privmsg-privmsg-:nick!user@host PRIVMSG ircbot :Hello ircbot] 
enrobie/plugins/ainswer/test/test_ainswer.py::test_AinswerQuestion_prompt[hubert_privmsg-privmsg-:hubert!hubert@science.com PRIVMSG ircbot :ircbot] 
[gw3] [  5%] ERROR enrobie/robie/test/test_robie.py::test_Robie 
enrobie/robie/test/test_robie.py::test_Robie_jinja2 
[gw1] [  5%] ERROR enrobie/clients/irc/test/test_client.py::test_IRCClient_channels 
[gw0] [  6%] ERROR enrobie/robie/members/test/test_clients.py::test_RobieClients_cover 
enrobie/clients/irc/test/test_client.py::test_IRCClient_message 
enrobie/robie/test/test_service.py::test_RobieService_cover 
[gw2] [  6%] ERROR enrobie/plugins/ainswer/test/test_ainswer.py::test_AinswerQuestion_prompt[hubert_privmsg-privmsg-:hubert!hubert@science.com PRIVMSG ircbot :ircbot] 
enrobie/plugins/ainswer/test/test_ainswer.py::test_AinswerQuestion_prompt[hubert_chanmsg-chanmsg-:hubert!hubert@science.com PRIVMSG #enrobie :ircbot] 
[gw3] [  7%] ERROR enrobie/robie/test/test_robie.py::test_Robie_jinja2 
enrobie/robie/test/test_robie.py::test_Robie_printer 
[gw1] [  7%] ERROR enrobie/clients/irc/test/test_client.py::test_IRCClient_message 
enrobie/clients/irc/test/test_client.py::test_IRCClient_command 
[gw0] [  7%] ERROR enrobie/robie/test/test_service.py::test_RobieService_cover 
enrobie/robie/test/test_service.py::test_RobieService_healths 
[gw2] [  8%] ERROR enrobie/plugins/ainswer/test/test_ainswer.py::test_AinswerQuestion_prompt[hubert_chanmsg-chanmsg-:hubert!hubert@science.com PRIVMSG #enrobie :ircbot] 
enrobie/plugins/ainswer/test/test_ainswer.py::test_AinswerQuestion_engage 
[gw3] [  8%] ERROR enrobie/robie/test/test_robie.py::test_Robie_printer 
enrobie/robie/test/test_robie.py::test_Robie_cover 
[gw3] [  8%] PASSED enrobie/robie/test/test_robie.py::test_Robie_cover 
enrobie/robie/models/test/test_models.py::test_RobieModels_cover 
[gw3] [  9%] PASSED enrobie/robie/models/test/test_models.py::test_RobieModels_cover 
enrobie/robie/threads/test/test_client.py::test_RobieClientThread 
[gw1] [  9%] ERROR enrobie/clients/irc/test/test_client.py::test_IRCClient_command 
[gw0] [ 10%] ERROR enrobie/robie/test/test_service.py::test_RobieService_healths 
enrobie/robie/test/test_service.py::test_RobieService 
enrobie/clients/irc/test/test_client.py::test_IRCClient 
[gw2] [ 10%] ERROR enrobie/plugins/ainswer/test/test_ainswer.py::test_AinswerQuestion_engage 
enrobie/plugins/ainswer/test/test_ainswer.py::test_AinswerQuestion_prompt[random_chanmsg-chanmsg-:nick!user@host PRIVMSG #enrobie :Hello ircbot] 
[gw3] [ 10%] ERROR enrobie/robie/threads/test/test_client.py::test_RobieClientThread 
enrobie/robie/childs/test/test_robie.py::test_RobieChilds 
[gw1] [ 11%] ERROR enrobie/clients/irc/test/test_client.py::test_IRCClient 
enrobie/clients/irc/test/test_client.py::test_IRCClient_compose 
[gw0] [ 11%] ERROR enrobie/robie/test/test_service.py::test_RobieService 
enrobie/robie/members/test/test_plugins.py::test_RobiePlugins_cover 
[gw2] [ 12%] ERROR enrobie/plugins/ainswer/test/test_ainswer.py::test_AinswerQuestion_prompt[random_chanmsg-chanmsg-:nick!user@host PRIVMSG #enrobie :Hello ircbot] 
enrobie/robie/childs/test/test_child.py::test_RobieChild_cover 
[gw3] [ 12%] ERROR enrobie/robie/childs/test/test_robie.py::test_RobieChilds 
enrobie/plugins/nagios/test/test_plugin.py::test_NagiosPlugin 
[gw1] [ 12%] ERROR enrobie/clients/irc/test/test_client.py::test_IRCClient_compose 
enrobie/clients/irc/test/test_message.py::test_IRCMessage_samples 
[gw0] [ 13%] ERROR enrobie/robie/members/test/test_plugins.py::test_RobiePlugins_cover 
enrobie/robie/members/test/test_plugins.py::test_RobiePlugins 
[gw2] [ 13%] ERROR enrobie/robie/childs/test/test_child.py::test_RobieChild_cover 
enrobie/robie/members/test/test_member.py::test_RobieMember_cover 
[gw3] [ 14%] ERROR enrobie/plugins/nagios/test/test_plugin.py::test_NagiosPlugin 
enrobie/plugins/nagios/test/test_plugin.py::test_NagiosPlugin_cover 
[gw1] [ 14%] ERROR enrobie/clients/irc/test/test_message.py::test_IRCMessage_samples 
enrobie/clients/irc/test/test_message.py::test_IRCMessage_reply 
[gw0] [ 14%] ERROR enrobie/robie/members/test/test_plugins.py::test_RobiePlugins 
enrobie/plugins/ainswer/test/test_history.py::test_AinswerHistory 
[gw2] [ 15%] ERROR enrobie/robie/members/test/test_member.py::test_RobieMember_cover 
enrobie/robie/threads/test/test_plugin.py::test_RobiePluginThread 
[gw3] [ 15%] FAILED enrobie/plugins/nagios/test/test_plugin.py::test_NagiosPlugin_cover 
enrobie/robie/test/test_config.py::test_RobieConfig 
[gw1] [ 15%] ERROR enrobie/clients/irc/test/test_message.py::test_IRCMessage_reply 
enrobie/clients/irc/test/test_message.py::test_IRCMessage 
[gw0] [ 16%] ERROR enrobie/plugins/ainswer/test/test_history.py::test_AinswerHistory 
enrobie/plugins/ainswer/test/test_history.py::test_AinswerHistory_cover 
[gw3] [ 16%] PASSED enrobie/robie/test/test_config.py::test_RobieConfig 
enrobie/robie/addons/test/test_logger.py::test_RobieLogger 
[gw2] [ 17%] ERROR enrobie/robie/threads/test/test_plugin.py::test_RobiePluginThread 
enrobie/execution/test/test_crypts.py::test_arguments 
[gw2] [ 17%] PASSED enrobie/execution/test/test_crypts.py::test_arguments 
enrobie/plugins/autonick/test/test_plugin.py::test_AutoNickPlugin 
[gw3] [ 17%] ERROR enrobie/robie/addons/test/test_logger.py::test_RobieLogger 
enrobie/robie/addons/test/test_logger.py::test_RobieLogger_cover 
[gw1] [ 18%] ERROR enrobie/clients/irc/test/test_message.py::test_IRCMessage 
enrobie/robie/models/test/test_command.py::test_RobieCommand 
[gw0] [ 18%] ERROR enrobie/plugins/ainswer/test/test_history.py::test_AinswerHistory_cover 
enrobie/plugins/logger/test/test_history.py::test_LoggerHistory_cover 
[gw2] [ 19%] ERROR enrobie/plugins/autonick/test/test_plugin.py::test_AutoNickPlugin 
enrobie/plugins/autonick/test/test_plugin.py::test_AutoNickPlugin_cover 
[gw3] [ 19%] ERROR enrobie/robie/addons/test/test_logger.py::test_RobieLogger_cover 
enrobie/robie/addons/test/test_logger.py::test_RobieLogger_message 
[gw1] [ 19%] ERROR enrobie/robie/models/test/test_command.py::test_RobieCommand 
enrobie/clients/discord/test/test_command.py::test_DSCCommand 
[gw0] [ 20%] ERROR enrobie/plugins/logger/test/test_history.py::test_LoggerHistory_cover 
enrobie/__init__.py::mypy-status 
[gw2] [ 20%] ERROR enrobie/plugins/autonick/test/test_plugin.py::test_AutoNickPlugin_cover 
enrobie/plugins/logger/test/test_plugin.py::test_LoggerPlugin_cover 
[gw1] [ 21%] ERROR enrobie/clients/discord/test/test_command.py::test_DSCCommand 
[gw3] [ 21%] ERROR enrobie/robie/addons/test/test_logger.py::test_RobieLogger_message 
enrobie/robie/addons/test/test_queue.py::test_RobieQueueItem 
enrobie/clients/mattermost/test/test_client.py::test_MTMClient_compose 
[gw3] [ 21%] PASSED enrobie/robie/addons/test/test_queue.py::test_RobieQueueItem 
enrobie/robie/addons/test/test_queue.py::test_RobieQueue 
[gw2] [ 22%] ERROR enrobie/plugins/logger/test/test_plugin.py::test_LoggerPlugin_cover 
enrobie/plugins/logger/test/test_plugin.py::test_LoggerPlugin 
[gw1] [ 22%] ERROR enrobie/clients/mattermost/test/test_client.py::test_MTMClient_compose 
enrobie/clients/mattermost/test/test_client.py::test_MTMClient_channels 
[gw3] [ 22%] ERROR enrobie/robie/addons/test/test_queue.py::test_RobieQueue 
enrobie/clients/irc/__init__.py::mypy 
[gw2] [ 23%] ERROR enrobie/plugins/logger/test/test_plugin.py::test_LoggerPlugin 
enrobie/utils/test/test_param.py::test_InvalidParam 
[gw2] [ 23%] ERROR enrobie/utils/test/test_param.py::test_InvalidParam 
enrobie/clients/mattermost/params.py::mypy 
[gw1] [ 24%] FAILED enrobie/clients/mattermost/test/test_client.py::test_MTMClient_channels 
enrobie/clients/mattermost/test/test_client.py::test_MTMClient 
[gw1] [ 24%] ERROR enrobie/clients/mattermost/test/test_client.py::test_MTMClient 
enrobie/clients/mattermost/test/test_client.py::test_MTMClient_message 
[gw1] [ 24%] ERROR enrobie/clients/mattermost/test/test_client.py::test_MTMClient_message 
enrobie/plugins/ainswer/test/test_ainswer.py::mypy 
[gw0] [ 25%] FAILED enrobie/__init__.py::mypy-status 
enrobie/clients/discord/__init__.py::mypy 
[gw2] [ 25%] PASSED enrobie/clients/mattermost/params.py::mypy 
[gw0] [ 26%] PASSED enrobie/clients/discord/__init__.py::mypy 
enrobie/clients/mattermost/message.py::mypy 
[gw2] [ 26%] PASSED enrobie/clients/mattermost/message.py::mypy 
enrobie/clients/__init__.py::mypy 
[gw0] [ 26%] PASSED enrobie/clients/__init__.py::mypy 
enrobie/clients/mattermost/__init__.py::mypy 
enrobie/clients/discord/test/test_client.py::mypy 
[gw2] [ 27%] PASSED enrobie/clients/mattermost/__init__.py::mypy 
enrobie/clients/mattermost/test/test_command.py::mypy 
[gw0] [ 27%] PASSED enrobie/clients/discord/test/test_client.py::mypy 
[gw2] [ 28%] PASSED enrobie/clients/mattermost/test/test_command.py::mypy 
enrobie/clients/discord/command.py::mypy 
enrobie/clients/mattermost/test/test_message.py::mypy 
[gw0] [ 28%] PASSED enrobie/clients/discord/command.py::mypy 
[gw1] [ 28%] PASSED enrobie/plugins/ainswer/test/test_ainswer.py::mypy 
[gw2] [ 29%] PASSED enrobie/clients/mattermost/test/test_message.py::mypy 
enrobie/execution/service.py::mypy 
enrobie/clients/discord/message.py::mypy 
[gw0] [ 29%] PASSED enrobie/clients/discord/message.py::mypy 
enrobie/clients/discord/params.py::mypy 
[gw2] [ 29%] PASSED enrobie/execution/service.py::mypy 
enrobie/execution/config.py::mypy 
[gw0] [ 30%] PASSED enrobie/clients/discord/params.py::mypy 
enrobie/clients/discord/test/__init__.py::mypy 
enrobie/plugins/__init__.py::mypy 
[gw2] [ 30%] PASSED enrobie/execution/config.py::mypy 
enrobie/execution/crypts.py::mypy 
[gw1] [ 31%] PASSED enrobie/plugins/__init__.py::mypy 
[gw0] [ 31%] PASSED enrobie/clients/discord/test/__init__.py::mypy 
[gw2] [ 31%] PASSED enrobie/execution/crypts.py::mypy 
enrobie/plugins/ainswer/__init__.py::mypy 
enrobie/clients/discord/client.py::mypy 
enrobie/execution/test/__init__.py::mypy 
[gw1] [ 32%] PASSED enrobie/plugins/ainswer/__init__.py::mypy 
[gw2] [ 32%] PASSED enrobie/execution/test/__init__.py::mypy 
enrobie/plugins/ainswer/ainswer.py::mypy 
enrobie/execution/__init__.py::mypy 
[gw1] [ 33%] PASSED enrobie/plugins/ainswer/ainswer.py::mypy 
[gw2] [ 33%] PASSED enrobie/execution/__init__.py::mypy 
enrobie/plugins/ainswer/test/__init__.py::mypy 
enrobie/conftest.py::mypy 
[gw2] [ 33%] PASSED enrobie/conftest.py::mypy 
[gw1] [ 34%] PASSED enrobie/plugins/ainswer/test/__init__.py::mypy 
enrobie/execution/test/test_config.py::mypy 
enrobie/plugins/ainswer/plugin.py::mypy 
[gw1] [ 34%] FAILED enrobie/plugins/ainswer/plugin.py::mypy 
[gw2] [ 35%] PASSED enrobie/execution/test/test_config.py::mypy 
enrobie/plugins/ainswer/history.py::mypy 
enrobie/execution/test/test_crypts.py::mypy 
[gw3] [ 35%] PASSED enrobie/clients/irc/__init__.py::mypy 
[gw2] [ 35%] PASSED enrobie/execution/test/test_crypts.py::mypy 
enrobie/clients/irc/client.py::mypy 
enrobie/execution/test/test_service.py::mypy 
[gw3] [ 36%] PASSED enrobie/clients/irc/client.py::mypy 
enrobie/clients/irc/params.py::mypy 
[gw3] [ 36%] PASSED enrobie/clients/irc/params.py::mypy 
enrobie/clients/irc/message.py::mypy 
[gw3] [ 36%] PASSED enrobie/clients/irc/message.py::mypy 
enrobie/clients/irc/states.py::mypy 
[gw3] [ 37%] PASSED enrobie/clients/irc/states.py::mypy 
enrobie/clients/irc/command.py::mypy 
[gw3] [ 37%] PASSED enrobie/clients/irc/command.py::mypy 
enrobie/clients/irc/test/test_command.py::mypy 
[gw3] [ 38%] PASSED enrobie/clients/irc/test/test_command.py::mypy 
enrobie/clients/irc/test/test_message.py::mypy 
[gw3] [ 38%] PASSED enrobie/clients/irc/test/test_message.py::mypy 
enrobie/clients/mattermost/client.py::mypy 
[gw3] [ 38%] PASSED enrobie/clients/mattermost/client.py::mypy 
enrobie/clients/mattermost/command.py::mypy 
[gw3] [ 39%] PASSED enrobie/clients/mattermost/command.py::mypy 
enrobie/clients/mattermost/test/__init__.py::mypy 
[gw0] [ 39%] PASSED enrobie/clients/discord/client.py::mypy 
enrobie/__init__.py::mypy 
[gw3] [ 40%] PASSED enrobie/clients/mattermost/test/__init__.py::mypy 
enrobie/clients/mattermost/test/test_client.py::mypy 
[gw0] [ 40%] PASSED enrobie/__init__.py::mypy 
enrobie/clients/discord/test/test_command.py::mypy 
[gw3] [ 40%] PASSED enrobie/clients/mattermost/test/test_client.py::mypy 
enrobie/plugins/nagios/ainswer.py::mypy 
[gw0] [ 41%] PASSED enrobie/clients/discord/test/test_command.py::mypy 
[gw3] [ 41%] PASSED enrobie/plugins/nagios/ainswer.py::mypy 
enrobie/plugins/nagios/helpers.py::mypy 
enrobie/clients/discord/test/test_message.py::mypy 
[gw0] [ 42%] PASSED enrobie/clients/discord/test/test_message.py::mypy 
[gw3] [ 42%] PASSED enrobie/plugins/nagios/helpers.py::mypy 
enrobie/plugins/nagios/current.py::mypy 
enrobie/clients/irc/test/__init__.py::mypy 
[gw3] [ 42%] PASSED enrobie/plugins/nagios/current.py::mypy 
[gw1] [ 43%] PASSED enrobie/plugins/ainswer/history.py::mypy 
enrobie/plugins/nagios/plugin.py::mypy 
[gw0] [ 43%] PASSED enrobie/clients/irc/test/__init__.py::mypy 
enrobie/clients/irc/test/test_client.py::mypy 
enrobie/plugins/ainswer/params.py::mypy 
[gw3] [ 43%] PASSED enrobie/plugins/nagios/plugin.py::mypy 
enrobie/plugins/nagios/params.py::mypy 
[gw0] [ 44%] PASSED enrobie/clients/irc/test/test_client.py::mypy 
[gw2] [ 44%] PASSED enrobie/execution/test/test_service.py::mypy 
enrobie/plugins/autonick/test/test_plugin.py::mypy 
[gw1] [ 45%] PASSED enrobie/plugins/ainswer/params.py::mypy 
[gw3] [ 45%] PASSED enrobie/plugins/nagios/params.py::mypy 
enrobie/plugins/ainswer/common.py::mypy 
enrobie/plugins/nagios/test/__init__.py::mypy 
[gw2] [ 45%] PASSED enrobie/plugins/ainswer/common.py::mypy 
enrobie/plugins/ainswer/helpers.py::mypy 
[gw1] [ 46%] PASSED enrobie/plugins/ainswer/helpers.py::mypy 
[gw3] [ 46%] PASSED enrobie/plugins/nagios/test/__init__.py::mypy 
enrobie/plugins/nagios/__init__.py::mypy 
enrobie/plugins/enhomie/test/test_plugin.py::mypy 
enrobie/plugins/ainswer/test/test_history.py::mypy 
[gw2] [ 47%] PASSED enrobie/plugins/enhomie/test/test_plugin.py::mypy 
[gw3] [ 47%] PASSED enrobie/plugins/nagios/__init__.py::mypy 
enrobie/plugins/nagios/test/test_plugin.py::mypy 
enrobie/plugins/enhomie/test/__init__.py::mypy 
[gw1] [ 47%] PASSED enrobie/plugins/ainswer/test/test_history.py::mypy 
[gw3] [ 48%] PASSED enrobie/plugins/nagios/test/test_plugin.py::mypy 
[gw2] [ 48%] PASSED enrobie/plugins/enhomie/test/__init__.py::mypy 
enrobie/plugins/status/params.py::mypy 
enrobie/plugins/logger/test/test_history.py::mypy 
enrobie/plugins/ainswer/test/test_plugin.py::mypy 
[gw3] [ 49%] PASSED enrobie/plugins/status/params.py::mypy 
[gw1] [ 49%] PASSED enrobie/plugins/ainswer/test/test_plugin.py::mypy 
enrobie/plugins/autojoin/test/test_plugin.py::mypy 
[gw2] [ 49%] PASSED enrobie/plugins/logger/test/test_history.py::mypy 
enrobie/plugins/status/__init__.py::mypy 
[gw3] [ 50%] PASSED enrobie/plugins/status/__init__.py::mypy 
enrobie/plugins/logger/history.py::mypy 
[gw2] [ 50%] PASSED enrobie/plugins/logger/history.py::mypy 
enrobie/plugins/status/plugin.py::mypy 
enrobie/plugins/logger/plugin.py::mypy 
[gw1] [ 50%] PASSED enrobie/plugins/autojoin/test/test_plugin.py::mypy 
enrobie/plugins/autojoin/__init__.py::mypy 
[gw1] [ 51%] PASSED enrobie/plugins/autojoin/__init__.py::mypy 
[gw3] [ 51%] PASSED enrobie/plugins/status/plugin.py::mypy 
enrobie/plugins/status/test/__init__.py::mypy 
[gw2] [ 52%] PASSED enrobie/plugins/logger/plugin.py::mypy 
enrobie/plugins/logger/test/__init__.py::mypy 
enrobie/plugins/autojoin/test/__init__.py::mypy 
[gw3] [ 52%] PASSED enrobie/plugins/status/test/__init__.py::mypy 
[gw2] [ 52%] PASSED enrobie/plugins/logger/test/__init__.py::mypy 
enrobie/plugins/status/helpers.py::mypy 
[gw3] [ 53%] PASSED enrobie/plugins/status/helpers.py::mypy 
[gw1] [ 53%] PASSED enrobie/plugins/autojoin/test/__init__.py::mypy 
enrobie/plugins/autojoin/params.py::mypy 
enrobie/plugins/logger/__init__.py::mypy 
[gw2] [ 54%] PASSED enrobie/plugins/logger/__init__.py::mypy 
enrobie/plugins/logger/params.py::mypy 
[gw1] [ 54%] PASSED enrobie/plugins/autojoin/params.py::mypy 
enrobie/plugins/status/common.py::mypy 
[gw3] [ 54%] PASSED enrobie/plugins/status/common.py::mypy 
enrobie/plugins/autojoin/plugin.py::mypy 
[gw2] [ 55%] PASSED enrobie/plugins/logger/params.py::mypy 
enrobie/plugins/logger/test/test_plugin.py::mypy 
enrobie/plugins/status/test/test_plugin.py::mypy 
[gw3] [ 55%] PASSED enrobie/plugins/status/test/test_plugin.py::mypy 
[gw2] [ 56%] PASSED enrobie/plugins/logger/test/test_plugin.py::mypy 
enrobie/robie/addons/test/__init__.py::mypy 
[gw1] [ 56%] PASSED enrobie/plugins/autojoin/plugin.py::mypy 
enrobie/plugins/autonick/params.py::mypy 
enrobie/robie/addons/jinja2.py::mypy 
[gw0] [ 56%] PASSED enrobie/plugins/autonick/test/test_plugin.py::mypy 
[gw3] [ 57%] PASSED enrobie/robie/addons/test/__init__.py::mypy 
enrobie/robie/childs/client.py::mypy 
enrobie/plugins/autonick/plugin.py::mypy 
[gw0] [ 57%] PASSED enrobie/plugins/autonick/plugin.py::mypy 
[gw2] [ 57%] PASSED enrobie/robie/addons/jinja2.py::mypy 
enrobie/robie/addons/test/test_logger.py::mypy 
[gw2] [ 58%] PASSED enrobie/robie/addons/test/test_logger.py::mypy 
[gw3] [ 58%] PASSED enrobie/robie/childs/client.py::mypy 
enrobie/robie/childs/__init__.py::mypy 
[gw3] [ 59%] PASSED enrobie/robie/childs/__init__.py::mypy 
enrobie/plugins/autonick/test/__init__.py::mypy 
enrobie/robie/__init__.py::mypy 
[gw2] [ 59%] PASSED enrobie/robie/__init__.py::mypy 
enrobie/robie/addons/__init__.py::mypy 
[gw1] [ 59%] PASSED enrobie/plugins/autonick/params.py::mypy 
enrobie/plugins/autonick/__init__.py::mypy 
[gw1] [ 60%] PASSED enrobie/plugins/autonick/__init__.py::mypy 
enrobie/robie/childs/robie.py::mypy 
[gw1] [ 60%] PASSED enrobie/robie/childs/robie.py::mypy 
enrobie/robie/childs/test/test_client.py::mypy 
[gw1] [ 61%] PASSED enrobie/robie/childs/test/test_client.py::mypy 
enrobie/robie/childs/child.py::mypy 
[gw3] [ 61%] PASSED enrobie/robie/childs/child.py::mypy 
enrobie/robie/childs/plugin.py::mypy 
[gw3] [ 61%] PASSED enrobie/robie/childs/plugin.py::mypy 
[gw2] [ 62%] PASSED enrobie/robie/addons/__init__.py::mypy 
enrobie/robie/addons/queue.py::mypy 
enrobie/robie/childs/test/test_person.py::mypy 
[gw1] [ 62%] PASSED enrobie/robie/childs/test/test_person.py::mypy 
enrobie/robie/childs/test/test_plugin.py::mypy 
[gw1] [ 63%] PASSED enrobie/robie/childs/test/test_plugin.py::mypy 
enrobie/robie/childs/test/test_robie.py::mypy 
[gw0] [ 63%] PASSED enrobie/plugins/autonick/test/__init__.py::mypy 
enrobie/plugins/enhomie/ainswer.py::mypy 
enrobie/robie/childs/test/__init__.py::mypy 
[gw3] [ 63%] PASSED enrobie/robie/childs/test/__init__.py::mypy 
enrobie/robie/childs/test/test_child.py::mypy 
[gw1] [ 64%] PASSED enrobie/robie/childs/test/test_robie.py::mypy 
[gw2] [ 64%] PASSED enrobie/robie/addons/queue.py::mypy 
enrobie/robie/addons/logger.py::mypy 
[gw2] [ 64%] PASSED enrobie/robie/addons/logger.py::mypy 
enrobie/robie/addons/test/test_queue.py::mypy 
[gw2] [ 65%] PASSED enrobie/robie/addons/test/test_queue.py::mypy 
enrobie/robie/members/plugins.py::mypy 
enrobie/robie/members/clients.py::mypy 
[gw2] [ 65%] PASSED enrobie/robie/members/plugins.py::mypy 
[gw1] [ 66%] PASSED enrobie/robie/members/clients.py::mypy 
enrobie/robie/members/test/test_clients.py::mypy 
enrobie/robie/members/test/__init__.py::mypy 
[gw2] [ 66%] PASSED enrobie/robie/members/test/test_clients.py::mypy 
enrobie/robie/members/__init__.py::mypy 
[gw2] [ 66%] PASSED enrobie/robie/members/__init__.py::mypy 
enrobie/robie/members/member.py::mypy 
[gw2] [ 67%] PASSED enrobie/robie/members/member.py::mypy 
enrobie/robie/config.py::mypy 
[gw2] [ 67%] PASSED enrobie/robie/config.py::mypy 
enrobie/robie/common.py::mypy 
[gw2] [ 68%] PASSED enrobie/robie/common.py::mypy 
enrobie/robie/params/common.py::mypy 
[gw2] [ 68%] PASSED enrobie/robie/params/common.py::mypy 
enrobie/robie/params/__init__.py::mypy 
[gw2] [ 68%] PASSED enrobie/robie/params/__init__.py::mypy 
enrobie/robie/params/child.py::mypy 
[gw2] [ 69%] PASSED enrobie/robie/params/child.py::mypy 
enrobie/robie/service.py::mypy 
[gw2] [ 69%] PASSED enrobie/robie/service.py::mypy 
enrobie/robie/params/plugin.py::mypy 
[gw0] [ 70%] PASSED enrobie/plugins/enhomie/ainswer.py::mypy 
[gw2] [ 70%] PASSED enrobie/robie/params/plugin.py::mypy 
enrobie/plugins/enhomie/__init__.py::mypy 
enrobie/robie/params/service.py::mypy 
[gw0] [ 70%] PASSED enrobie/plugins/enhomie/__init__.py::mypy 
[gw2] [ 71%] PASSED enrobie/robie/params/service.py::mypy 
enrobie/plugins/enhomie/persist.py::mypy 
enrobie/robie/params/person.py::mypy 
[gw0] [ 71%] PASSED enrobie/plugins/enhomie/persist.py::mypy 
[gw2] [ 71%] PASSED enrobie/robie/params/person.py::mypy 
enrobie/plugins/enhomie/params.py::mypy 
enrobie/robie/test/__init__.py::mypy 
[gw3] [ 72%] PASSED enrobie/robie/childs/test/test_child.py::mypy 
[gw0] [ 72%] PASSED enrobie/plugins/enhomie/params.py::mypy 
enrobie/robie/childs/person.py::mypy 
[gw2] [ 73%] PASSED enrobie/robie/test/__init__.py::mypy 
enrobie/plugins/enhomie/helpers.py::mypy 
[gw0] [ 73%] PASSED enrobie/plugins/enhomie/helpers.py::mypy 
enrobie/robie/robie.py::mypy 
[gw3] [ 73%] PASSED enrobie/robie/childs/person.py::mypy 
[gw2] [ 74%] PASSED enrobie/robie/robie.py::mypy 
enrobie/plugins/enhomie/plugin.py::mypy 
enrobie/robie/models/test/__init__.py::mypy 
[gw0] [ 74%] PASSED enrobie/plugins/enhomie/plugin.py::mypy 
enrobie/robie/params/robie.py::mypy 
enrobie/robie/params/client.py::mypy 
[gw3] [ 75%] PASSED enrobie/robie/models/test/__init__.py::mypy 
enrobie/robie/models/robie.py::mypy 
[gw2] [ 75%] PASSED enrobie/robie/params/robie.py::mypy 
[gw0] [ 75%] PASSED enrobie/robie/params/client.py::mypy 
enrobie/robie/test/test_config.py::mypy 
enrobie/robie/threads/__init__.py::mypy 
[gw1] [ 76%] PASSED enrobie/robie/members/test/__init__.py::mypy 
enrobie/robie/members/test/test_member.py::mypy 
[gw1] [ 76%] PASSED enrobie/robie/members/test/test_member.py::mypy 
[gw3] [ 77%] PASSED enrobie/robie/models/robie.py::mypy 
[gw0] [ 77%] PASSED enrobie/robie/test/test_config.py::mypy 
enrobie/robie/models/message.py::mypy 
[gw2] [ 77%] PASSED enrobie/robie/threads/__init__.py::mypy 
enrobie/robie/threads/test/test_client.py::mypy 
enrobie/robie/test/test_robie.py::mypy 
[gw0] [ 78%] PASSED enrobie/robie/test/test_robie.py::mypy 
enrobie/robie/members/test/test_plugins.py::mypy 
[gw1] [ 78%] PASSED enrobie/robie/members/test/test_plugins.py::mypy 
enrobie/robie/models/__init__.py::mypy 
[gw3] [ 78%] PASSED enrobie/robie/models/message.py::mypy 
enrobie/robie/models/test/test_message.py::mypy 
[gw3] [ 79%] PASSED enrobie/robie/models/test/test_message.py::mypy 
[gw2] [ 79%] PASSED enrobie/robie/threads/test/test_client.py::mypy 
enrobie/robie/threads/plugin.py::mypy 
[gw1] [ 80%] PASSED enrobie/robie/models/__init__.py::mypy 
enrobie/robie/models/command.py::mypy 
enrobie/robie/test/test_service.py::mypy 
[gw0] [ 80%] PASSED enrobie/robie/test/test_service.py::mypy 
[gw1] [ 80%] PASSED enrobie/robie/models/command.py::mypy 
enrobie/robie/threads/client.py::mypy 
enrobie/robie/models/test/test_models.py::mypy 
[gw0] [ 81%] PASSED enrobie/robie/threads/client.py::mypy 
enrobie/robie/threads/test/test_plugin.py::mypy 
[gw3] [ 81%] PASSED enrobie/robie/models/test/test_models.py::mypy 
enrobie/robie/threads/thread.py::mypy 
[gw0] [ 82%] PASSED enrobie/robie/threads/test/test_plugin.py::mypy 
enrobie/robie/threads/test/test_thread.py::mypy 
enrobie/robie/models/test/test_command.py::mypy 
[gw3] [ 82%] PASSED enrobie/robie/threads/thread.py::mypy 
enrobie/utils/test/__init__.py::mypy 
[gw1] [ 82%] PASSED enrobie/robie/models/test/test_command.py::mypy 
[gw0] [ 83%] PASSED enrobie/robie/threads/test/test_thread.py::mypy 
[gw3] [ 83%] PASSED enrobie/utils/test/__init__.py::mypy 
enrobie/utils/child.py::mypy 
enrobie/utils/importer.py::mypy 
enrobie/utils/states.py::mypy 
[gw3] [ 84%] PASSED enrobie/utils/states.py::mypy 
[gw1] [ 84%] PASSED enrobie/utils/child.py::mypy 
[gw0] [ 84%] PASSED enrobie/utils/importer.py::mypy 
enrobie/utils/test/test_importer.py::mypy 
enrobie/utils/param.py::mypy 
enrobie/utils/test/test_child.py::mypy 
[gw1] [ 85%] PASSED enrobie/utils/param.py::mypy 
[gw3] [ 85%] PASSED enrobie/utils/test/test_child.py::mypy 
enrobie/utils/__init__.py::mypy 
enrobie/utils/test/test_thread.py::mypy 
[gw1] [ 85%] PASSED enrobie/utils/__init__.py::mypy 
[gw3] [ 86%] PASSED enrobie/utils/test/test_thread.py::mypy 
enrobie/clients/mattermost/test/test_command.py::test_MTMCommand 
enrobie/utils/thread.py::mypy 
[gw3] [ 86%] PASSED enrobie/utils/thread.py::mypy 
enrobie/utils/test/test_thread.py::test_DupliThread 
[gw3] [ 87%] PASSED enrobie/utils/test/test_thread.py::test_DupliThread 
enrobie/utils/test/test_thread.py::test_DupliThread_cover 
[gw2] [ 87%] PASSED enrobie/robie/threads/plugin.py::mypy 
enrobie/robie/threads/test/__init__.py::mypy 
[gw2] [ 87%] PASSED enrobie/robie/threads/test/__init__.py::mypy 
enrobie/clients/discord/test/test_client.py::test_DSCClient_message 
[gw0] [ 88%] PASSED enrobie/utils/test/test_importer.py::mypy 
enrobie/utils/test/test_param.py::mypy 
[gw0] [ 88%] PASSED enrobie/utils/test/test_param.py::mypy 
enrobie/utils/test/test_states.py::mypy 
[gw0] [ 89%] PASSED enrobie/utils/test/test_states.py::mypy 
enrobie/clients/discord/test/test_client.py::test_DSCClient_command 
[gw1] [ 89%] ERROR enrobie/clients/mattermost/test/test_command.py::test_MTMCommand 
[gw3] [ 89%] ERROR enrobie/utils/test/test_thread.py::test_DupliThread_cover 
[gw2] [ 90%] ERROR enrobie/clients/discord/test/test_client.py::test_DSCClient_message 
enrobie/robie/childs/test/test_plugin.py::test_RobiePlugin_cover 
enrobie/clients/discord/test/test_client.py::test_DSCClient_channels 
enrobie/clients/discord/test/test_client.py::test_DSCClient 
[gw0] [ 90%] ERROR enrobie/clients/discord/test/test_client.py::test_DSCClient_command 
enrobie/plugins/status/test/test_plugin.py::test_StatusPlugin_cover 
[gw3] [ 91%] ERROR enrobie/clients/discord/test/test_client.py::test_DSCClient_channels 
enrobie/clients/discord/test/test_client.py::test_DSCClient_compose 
[gw1] [ 91%] ERROR enrobie/robie/childs/test/test_plugin.py::test_RobiePlugin_cover 
enrobie/plugins/status/test/test_plugin.py::test_StatusPlugin 
[gw2] [ 91%] ERROR enrobie/clients/discord/test/test_client.py::test_DSCClient 
enrobie/clients/discord/test/test_message.py::test_DSCMessage_reply 
[gw0] [ 92%] ERROR enrobie/plugins/status/test/test_plugin.py::test_StatusPlugin_cover 
enrobie/clients/discord/test/test_message.py::test_DSCMessage 
[gw3] [ 92%] ERROR enrobie/clients/discord/test/test_client.py::test_DSCClient_compose 
enrobie/clients/discord/test/test_message.py::test_DSCMessage_samples 
[gw1] [ 92%] ERROR enrobie/plugins/status/test/test_plugin.py::test_StatusPlugin 
enrobie/robie/childs/test/test_person.py::test_RobiePerson 
[gw2] [ 93%] ERROR enrobie/clients/discord/test/test_message.py::test_DSCMessage_reply 
[gw0] [ 93%] ERROR enrobie/clients/discord/test/test_message.py::test_DSCMessage 
enrobie/execution/test/test_config.py::test_arguments 
[gw2] [ 94%] PASSED enrobie/execution/test/test_config.py::test_arguments 
enrobie/plugins/enhomie/test/test_plugin.py::test_HomiePlugin 
enrobie/clients/mattermost/test/test_message.py::test_MTMMessage 
[gw3] [ 94%] ERROR enrobie/clients/discord/test/test_message.py::test_DSCMessage_samples 
[gw1] [ 94%] ERROR enrobie/robie/childs/test/test_person.py::test_RobiePerson 
enrobie/plugins/enhomie/test/test_plugin.py::test_HomiePlugin_cover 
enrobie/robie/childs/test/test_client.py::test_RobieClient_cover 
[gw2] [ 95%] ERROR enrobie/clients/mattermost/test/test_message.py::test_MTMMessage 
enrobie/clients/mattermost/test/test_message.py::test_MTMMessage_samples 
[gw0] [ 95%] ERROR enrobie/plugins/enhomie/test/test_plugin.py::test_HomiePlugin 
enrobie/clients/mattermost/test/test_message.py::test_MTMMessage_reply 
[gw1] [ 96%] ERROR enrobie/robie/childs/test/test_client.py::test_RobieClient_cover 
enrobie/plugins/ainswer/test/test_plugin.py::test_AinswerPlugin 
[gw2] [ 96%] ERROR enrobie/clients/mattermost/test/test_message.py::test_MTMMessage_samples 
[gw3] [ 96%] FAILED enrobie/plugins/enhomie/test/test_plugin.py::test_HomiePlugin_cover 
enrobie/plugins/ainswer/test/test_plugin.py::test_AinswerPlugin_cover 
enrobie/clients/irc/test/test_command.py::test_IRCCommand 
[gw0] [ 97%] ERROR enrobie/clients/mattermost/test/test_message.py::test_MTMMessage_reply 
enrobie/plugins/autojoin/test/test_plugin.py::test_AutoJoinPlugin_cover 
[gw1] [ 97%] ERROR enrobie/plugins/ainswer/test/test_plugin.py::test_AinswerPlugin 
enrobie/plugins/autojoin/test/test_plugin.py::test_AutoJoinPlugin 
[gw2] [ 98%] ERROR enrobie/plugins/ainswer/test/test_plugin.py::test_AinswerPlugin_cover 
[gw3] [ 98%] ERROR enrobie/clients/irc/test/test_command.py::test_IRCCommand 
enrobie/utils/test/test_child.py::test_InvalidChild 
[gw2] [ 98%] PASSED enrobie/utils/test/test_child.py::test_InvalidChild 
enrobie/utils/test/test_child.py::test_InvalidChild_cover 
[gw0] [ 99%] ERROR enrobie/plugins/autojoin/test/test_plugin.py::test_AutoJoinPlugin_cover 
[gw1] [ 99%] ERROR enrobie/plugins/autojoin/test/test_plugin.py::test_AutoJoinPlugin 
[gw3] [100%] ERROR enrobie/utils/test/test_child.py::test_InvalidChild_cover 

==================================== ERRORS ====================================
_____________________ ERROR at setup of test_LoggerHistory _____________________
[gw1] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7fe1aa6247a0>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7fe1aad5bbc0>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
___________________ ERROR at setup of test_RobieThread_cover ___________________
[gw0] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7f5201584c20>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7f5201354980>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
___________________ ERROR at setup of test_MTMClient_command ___________________
[gw2] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7fcbcb26d5e0>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7fcbcb370470>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
_____________________ ERROR at setup of test_Robie_person ______________________
[gw3] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7f50f6630260>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7f50f64b7e60>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
_____________________ ERROR at setup of test_RobieMessage ______________________
[gw1] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7fe1a9f60770>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7fe1a9dcc590>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
_____________________ ERROR at setup of test_RobieClients ______________________
[gw0] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7f5200b19340>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7f5200aa7170>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
_ ERROR at setup of test_AinswerQuestion_prompt[random_privmsg-privmsg-:nick!user@host PRIVMSG ircbot :Hello ircbot] _
[gw2] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7fcbca8a2840>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7fcbca8fd250>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
_________________________ ERROR at setup of test_Robie _________________________
[gw3] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7f50f5a8df40>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7f50f5af9190>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
__________________ ERROR at setup of test_IRCClient_channels ___________________
[gw1] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7fe1a9dcd580>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7fe1a9dccbc0>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
__________________ ERROR at setup of test_RobieClients_cover ___________________
[gw0] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7f5200ae52e0>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7f5200af5e50>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
_ ERROR at setup of test_AinswerQuestion_prompt[hubert_privmsg-privmsg-:hubert!hubert@science.com PRIVMSG ircbot :ircbot] _
[gw2] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7fcbca8d30e0>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7fcbca7c3fb0>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
_____________________ ERROR at setup of test_Robie_jinja2 ______________________
[gw3] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7f50f5afb860>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7f50f5adb860>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
___________________ ERROR at setup of test_IRCClient_message ___________________
[gw1] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7fe1a9d8a7e0>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7fe1a9cadc70>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
__________________ ERROR at setup of test_RobieService_cover ___________________
[gw0] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7f52018d82f0>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7f52009bd6d0>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
_ ERROR at setup of test_AinswerQuestion_prompt[hubert_chanmsg-chanmsg-:hubert!hubert@science.com PRIVMSG #enrobie :ircbot] _
[gw2] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7fcbca8fc9b0>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7fcbca7c36e0>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
_____________________ ERROR at setup of test_Robie_printer _____________________
[gw3] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7f50f5adbe00>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7f50f59d9280>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
___________________ ERROR at setup of test_IRCClient_command ___________________
[gw1] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7fe1a9dfb9e0>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7fe1a9cd8e30>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
_________________ ERROR at setup of test_RobieService_healths __________________
[gw0] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7f5200aa69f0>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7f52009fc7d0>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
________________ ERROR at setup of test_AinswerQuestion_engage _________________
[gw2] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7fcbca8ffcb0>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7fcbca7bb920>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
___________________ ERROR at setup of test_RobieClientThread ___________________
[gw3] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7f50f5ade5a0>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7f50f59db710>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
_______________________ ERROR at setup of test_IRCClient _______________________
[gw1] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7fe1a9dcc860>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7fe1a9c7b770>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
_____________________ ERROR at setup of test_RobieService ______________________
[gw0] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7f52009fcc80>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7f52009daea0>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
_ ERROR at setup of test_AinswerQuestion_prompt[random_chanmsg-chanmsg-:nick!user@host PRIVMSG #enrobie :Hello ircbot] _
[gw2] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7fcbca7d5ca0>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7fcbca8feb10>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
______________________ ERROR at setup of test_RobieChilds ______________________
[gw3] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7f50f5adbfe0>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7f50f5962f30>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
___________________ ERROR at setup of test_IRCClient_compose ___________________
[gw1] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7fe1a9caddf0>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7fe1a9dcf380>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
__________________ ERROR at setup of test_RobiePlugins_cover ___________________
[gw0] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7f52009beff0>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7f52009ff3b0>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
___________________ ERROR at setup of test_RobieChild_cover ____________________
[gw2] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7fcbca8fe3c0>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7fcbca7bbe90>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
_____________________ ERROR at setup of test_NagiosPlugin ______________________
[gw3] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7f50f5ad9280>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7f50f59d9d30>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
__________________ ERROR at setup of test_IRCMessage_samples ___________________
[gw1] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7fe1a9dfa6f0>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7fe1a9d9bb90>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
_____________________ ERROR at setup of test_RobiePlugins ______________________
[gw0] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7f52009bf1d0>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7f5200ae4bf0>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
___________________ ERROR at setup of test_RobieMember_cover ___________________
[gw2] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7fcbca8d1940>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7fcbca7ae660>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
___________________ ERROR at setup of test_IRCMessage_reply ____________________
[gw1] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7fe1a9c79c40>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7fe1a9ce88f0>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
____________________ ERROR at setup of test_AinswerHistory _____________________
[gw0] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7f52009db6b0>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7f5200996660>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
___________________ ERROR at setup of test_RobiePluginThread ___________________
[gw2] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7fcbca7affe0>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7fcbca64d010>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
______________________ ERROR at setup of test_RobieLogger ______________________
[gw3] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7f50f5962210>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7f50f59e1280>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
______________________ ERROR at setup of test_IRCMessage _______________________
[gw1] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7fe1a9c81f70>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7fe1a9ce8950>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
_________________ ERROR at setup of test_AinswerHistory_cover __________________
[gw0] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7f52009fc7d0>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7f52009db6b0>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
____________________ ERROR at setup of test_AutoNickPlugin _____________________
[gw2] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7fcbcb1c5130>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7fcbca7d5af0>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
___________________ ERROR at setup of test_RobieLogger_cover ___________________
[gw3] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7f50f5960080>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7f50f5afbc20>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
_____________________ ERROR at setup of test_RobieCommand ______________________
[gw1] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7fe1aad805c0>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7fe1a9cad670>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
__________________ ERROR at setup of test_LoggerHistory_cover __________________
[gw0] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7f52009ffc80>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7f5201367320>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
_________________ ERROR at setup of test_AutoNickPlugin_cover __________________
[gw2] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7fcbca8a1e80>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7fcbca7d5940>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
______________________ ERROR at setup of test_DSCCommand _______________________
[gw1] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7fe1aa6c9640>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7fe1a9cad940>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
__________________ ERROR at setup of test_RobieLogger_message __________________
[gw3] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7f50f5afa990>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7f50f5af94f0>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
__________________ ERROR at setup of test_LoggerPlugin_cover ___________________
[gw2] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7fcbcb8932c0>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7fcbca7ba870>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
___________________ ERROR at setup of test_MTMClient_compose ___________________
[gw1] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7fe1a9caef30>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7fe1a9df88f0>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
______________________ ERROR at setup of test_RobieQueue _______________________
[gw3] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7f50f59d8980>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7f50f5a8ffb0>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
_____________________ ERROR at setup of test_LoggerPlugin ______________________
[gw2] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7fcbca8a2990>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7fcbca7c3c20>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
_____________________ ERROR at setup of test_InvalidParam ______________________
[gw2] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7fcbca7c17c0>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7fcbca8d2930>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
_______________________ ERROR at setup of test_MTMClient _______________________
[gw1] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7fe1aad83e90>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7fe1a9d9bfe0>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
___________________ ERROR at setup of test_MTMClient_message ___________________
[gw1] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7fe1a9c79d00>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7fe1a9b472c0>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
______________________ ERROR at setup of test_MTMCommand _______________________
[gw1] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7fe1a9c82d80>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7fe1a9bf5d90>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
___________________ ERROR at setup of test_DupliThread_cover ___________________
[gw3] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7f50f58e5fa0>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7f50f5a8e480>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
___________________ ERROR at setup of test_DSCClient_message ___________________
[gw2] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7fcbca7c0590>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7fcbca8fdd30>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
___________________ ERROR at setup of test_DSCClient_command ___________________
[gw0] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7f520071fb90>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7f51fd5ce2a0>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
__________________ ERROR at setup of test_DSCClient_channels ___________________
[gw3] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7f50f5af96a0>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7f50f58d5460>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
___________________ ERROR at setup of test_RobiePlugin_cover ___________________
[gw1] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7fe1a9dceff0>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7fe1a9bf4e30>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
_______________________ ERROR at setup of test_DSCClient _______________________
[gw2] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7fcbca7aeb10>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7fcbca8fde80>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
__________________ ERROR at setup of test_StatusPlugin_cover ___________________
[gw0] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7f51fd598cb0>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7f51fd63e270>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
___________________ ERROR at setup of test_DSCClient_compose ___________________
[gw3] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7f50f6a7da60>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7f50f581c290>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
_____________________ ERROR at setup of test_StatusPlugin ______________________
[gw1] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7fe1a9d99640>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7fe1a9bf5a60>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
___________________ ERROR at setup of test_DSCMessage_reply ____________________
[gw2] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7fcbca7afa70>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7fcbca6b5970>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
______________________ ERROR at setup of test_DSCMessage _______________________
[gw0] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7f51fd7f3f20>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7f51fdb962d0>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
__________________ ERROR at setup of test_DSCMessage_samples ___________________
[gw3] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7f50f5a8ebd0>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7f50f58ca900>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
______________________ ERROR at setup of test_RobiePerson ______________________
[gw1] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7fe1a9dcc320>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7fe1a9b0a060>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
______________________ ERROR at setup of test_MTMMessage _______________________
[gw2] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7fcbca7c3c80>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7fcbca6b77a0>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
______________________ ERROR at setup of test_HomiePlugin ______________________
[gw0] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7f51fdb53110>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7f51fdc242f0>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
___________________ ERROR at setup of test_RobieClient_cover ___________________
[gw1] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7fe1a9b0a210>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7fe1a9b70920>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
__________________ ERROR at setup of test_MTMMessage_samples ___________________
[gw2] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7fcbca60c080>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7fcbca8fdee0>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
___________________ ERROR at setup of test_MTMMessage_reply ____________________
[gw0] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7f51fdd8bfb0>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7f51fe103650>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
_____________________ ERROR at setup of test_AinswerPlugin _____________________
[gw1] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7fe1a9dcffe0>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7fe1a9b72360>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
__________________ ERROR at setup of test_AinswerPlugin_cover __________________
[gw2] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7fcbca8ff170>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7fcbca60c680>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
______________________ ERROR at setup of test_IRCCommand _______________________
[gw3] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7f50f58d6fc0>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7f50f57dce90>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
_________________ ERROR at setup of test_AutoJoinPlugin_cover __________________
[gw0] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7f51fe2c5190>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7f51fe345dc0>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
____________________ ERROR at setup of test_AutoJoinPlugin _____________________
[gw1] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7fe1a9b72f60>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7fe1a9b09eb0>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
__________________ ERROR at setup of test_InvalidChild_cover ___________________
[gw3] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

config = <enrobie.robie.config.RobieConfig object at 0x7f50f57df500>

    @fixture
    def robie(
        config: RobieConfig,
    ) -> Robie:
        """
        Construct the instance for use in the downstream tests.
    
        :param config: Primary class instance for configuration.
        :returns: Newly constructed instance of related class.
        """
    
>       return robie_factory(config)

enrobie/conftest.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7f50f57f7050>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
=================================== FAILURES ===================================
___________________________ test_NagiosPlugin_cover ____________________________
[gw3] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-0/popen-gw3/test_NagiosPlugin_cover0')
client_dscsock = <function client_dscsock.<locals>._fixture at 0x7f50f5ac2840>
client_ircsock = <function client_ircsock.<locals>._fixture at 0x7f50f594ac00>
client_mtmsock = <function client_mtmsock.<locals>._fixture at 0x7f50f5949940>
respx_mock = <respx.router.MockRouter object at 0x7f51001db740>

    def test_NagiosPlugin_cover(  # noqa: CFQ001
        tmp_path: Path,
        client_dscsock: DSCClientSocket,
        client_ircsock: IRCClientSocket,
        client_mtmsock: MTMClientSocket,
        respx_mock: MockRouter,
    ) -> None:
        """
        Perform various tests associated with relevant routines.
    
        :param tmp_path: pytest object for temporal filesystem.
        :param client_dscsock: Object to mock client connection.
        :param client_ircsock: Object to mock client connection.
        :param client_mtmsock: Object to mock client connection.
        :param respx_mock: Object for mocking request operation.
        """
    
>       robie = robie_factory(
            config_factory(tmp_path))

enrobie/plugins/nagios/test/test_plugin.py:128: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7f50f5879250>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
___________________________ test_MTMClient_channels ____________________________
[gw1] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-0/popen-gw1/test_MTMClient_channels0')
client_mtmsock = <function client_mtmsock.<locals>._fixture at 0x7fe1a9de8e00>
respx_mock = <respx.router.MockRouter object at 0x7fe1b4573890>

    def test_MTMClient_channels(
        tmp_path: Path,
        client_mtmsock: MTMClientSocket,
        respx_mock: MockRouter,
    ) -> None:
        """
        Perform various tests associated with relevant routines.
    
        :param tmp_path: pytest object for temporal filesystem.
        :param client_mtmsock: Object to mock client connection.
        :param respx_mock: Object for mocking request operation.
        """
    
>       robie = robie_factory(
            config_factory(tmp_path))

enrobie/clients/mattermost/test/test_client.py:319: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7fe1a9ceb830>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError
_________________________________ test session _________________________________
[gw0] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3
mypy exited with status 1.
______________________ enrobie/plugins/ainswer/plugin.py _______________________
[gw1] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3
94: error: Unexpected keyword argument "api_key"  [call-arg]
105: error: Unexpected keyword argument "api_key"  [call-arg]
____________________________ test_HomiePlugin_cover ____________________________
[gw3] linux -- Python 3.12.9 /home/runner/work/enrobie/enrobie/main/.venv-package/bin/python3

tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-0/popen-gw3/test_HomiePlugin_cover0')
client_dscsock = <function client_dscsock.<locals>._fixture at 0x7f50f58dec00>
client_ircsock = <function client_ircsock.<locals>._fixture at 0x7f50f58dd580>
client_mtmsock = <function client_mtmsock.<locals>._fixture at 0x7f50f58eaa20>
respx_mock = <respx.router.MockRouter object at 0x7f51001db740>

    def test_HomiePlugin_cover(  # noqa: CFQ001
        tmp_path: Path,
        client_dscsock: DSCClientSocket,
        client_ircsock: IRCClientSocket,
        client_mtmsock: MTMClientSocket,
        respx_mock: MockRouter,
    ) -> None:
        """
        Perform various tests associated with relevant routines.
    
        :param tmp_path: pytest object for temporal filesystem.
        :param client_dscsock: Object to mock client connection.
        :param client_ircsock: Object to mock client connection.
        :param client_mtmsock: Object to mock client connection.
        :param respx_mock: Object for mocking request operation.
        """
    
>       robie = robie_factory(
            config_factory(tmp_path))

enrobie/plugins/enhomie/test/test_plugin.py:128: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
enrobie/conftest.py:121: in robie_factory
    return Robie(config)
enrobie/robie/robie.py:82: in __init__
    self.register_locate()
enrobie/robie/robie.py:314: in register_locate
    self.register(
enrobie/robie/robie.py:248: in register
    self.childs.register(
enrobie/robie/childs/robie.py:285: in register
    _put_plugin()
enrobie/robie/childs/robie.py:278: in _put_plugin
    object = plugin(
enrobie/robie/childs/child.py:55: in __init__
    self.__post__()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <enrobie.plugins.ainswer.plugin.AinswerPlugin object at 0x7f50f57283e0>

    def __post__(
        self,
    ) -> None:
        """
        Initialize instance for class using provided parameters.
        """
    
        self.__started = False
    
        params = self.params
    
        ainswer = params.ainswer
        secret = ainswer.secret
        origin = ainswer.origin
    
    
        self.__toolset = (
            AinswerToolset(self))
    
        self.__question = (
            AinswerQuestion(self))
    
        self.__history = (
            AinswerHistory(self))
    
    
        model: 'Model' | None = None
    
        if origin == 'anthropic':
    
            from pydantic_ai.models import anthropic
    
            _anthropic = (
                anthropic.AnthropicModel)
    
            model = _anthropic(
                ainswer.model,
                api_key=secret)
    
        elif origin == 'openai':
    
            from pydantic_ai.models import openai
    
            _openai = (
                openai.OpenAIModel)
    
>           model = _openai(
                ainswer.model,
                api_key=secret)
E           TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'

enrobie/plugins/ainswer/plugin.py:105: TypeError

---------- coverage: platform linux, python 3.12.9-final-0 -----------
Name                                              Stmts   Miss  Cover
---------------------------------------------------------------------
enrobie/__init__.py                                   6      0   100%
enrobie/clients/__init__.py                           7      0   100%
enrobie/clients/discord/__init__.py                   3      0   100%
enrobie/clients/discord/client.py                   169    110    35%
enrobie/clients/discord/command.py                   22      6    73%
enrobie/clients/discord/message.py                   51     25    51%
enrobie/clients/discord/params.py                    13      0   100%
enrobie/clients/discord/test/__init__.py              8      0   100%
enrobie/clients/discord/test/test_client.py          90     65    28%
enrobie/clients/discord/test/test_command.py         24     17    29%
enrobie/clients/discord/test/test_message.py        100     76    24%
enrobie/clients/irc/__init__.py                       3      0   100%
enrobie/clients/irc/client.py                       189    131    31%
enrobie/clients/irc/command.py                       13      3    77%
enrobie/clients/irc/message.py                       60     33    45%
enrobie/clients/irc/params.py                        12      0   100%
enrobie/clients/irc/states.py                         7      3    57%
enrobie/clients/irc/test/__init__.py                  8      0   100%
enrobie/clients/irc/test/test_client.py              84     62    26%
enrobie/clients/irc/test/test_command.py             21     14    33%
enrobie/clients/irc/test/test_message.py             99     75    24%
enrobie/clients/mattermost/__init__.py                3      0   100%
enrobie/clients/mattermost/client.py                173    113    35%
enrobie/clients/mattermost/command.py                22      6    73%
enrobie/clients/mattermost/message.py                51     25    51%
enrobie/clients/mattermost/params.py                 12      0   100%
enrobie/clients/mattermost/test/__init__.py           8      0   100%
enrobie/clients/mattermost/test/test_client.py      100     67    33%
enrobie/clients/mattermost/test/test_command.py      24     17    29%
enrobie/clients/mattermost/test/test_message.py     103     79    23%
enrobie/conftest.py                                  35      2    94%
enrobie/execution/__init__.py                         0      0   100%
enrobie/execution/config.py                          15      0   100%
enrobie/execution/crypts.py                          18      0   100%
enrobie/execution/service.py                         21      0   100%
enrobie/execution/test/__init__.py                    0      0   100%
enrobie/execution/test/test_config.py                 4      0   100%
enrobie/execution/test/test_crypts.py                 4      0   100%
enrobie/execution/test/test_service.py                4      0   100%
enrobie/plugins/__init__.py                          18      0   100%
enrobie/plugins/ainswer/__init__.py                   5      0   100%
enrobie/plugins/ainswer/ainswer.py                  190    152    20%
enrobie/plugins/ainswer/common.py                    11      0   100%
enrobie/plugins/ainswer/helpers.py                   91     80    12%
enrobie/plugins/ainswer/history.py                  159     93    42%
enrobie/plugins/ainswer/params.py                    40      0   100%
enrobie/plugins/ainswer/plugin.py                   179    113    37%
enrobie/plugins/ainswer/test/__init__.py              2      0   100%
enrobie/plugins/ainswer/test/test_ainswer.py         60     36    40%
enrobie/plugins/ainswer/test/test_history.py         48     38    21%
enrobie/plugins/ainswer/test/test_plugin.py          61     45    26%
enrobie/plugins/autojoin/__init__.py                  3      0   100%
enrobie/plugins/autojoin/params.py                   15      0   100%
enrobie/plugins/autojoin/plugin.py                  129    103    20%
enrobie/plugins/autojoin/test/__init__.py             0      0   100%
enrobie/plugins/autojoin/test/test_plugin.py         43     29    33%
enrobie/plugins/autonick/__init__.py                  3      0   100%
enrobie/plugins/autonick/params.py                   17      0   100%
enrobie/plugins/autonick/plugin.py                  132    102    23%
enrobie/plugins/autonick/test/__init__.py             0      0   100%
enrobie/plugins/autonick/test/test_plugin.py         43     29    33%
enrobie/plugins/enhomie/__init__.py                   3      0   100%
enrobie/plugins/enhomie/ainswer.py                   26     20    23%
enrobie/plugins/enhomie/helpers.py                   43     39     9%
enrobie/plugins/enhomie/params.py                    23      0   100%
enrobie/plugins/enhomie/persist.py                   68     30    56%
enrobie/plugins/enhomie/plugin.py                   103     72    30%
enrobie/plugins/enhomie/test/__init__.py              0      0   100%
enrobie/plugins/enhomie/test/test_plugin.py          92     61    34%
enrobie/plugins/logger/__init__.py                    3      0   100%
enrobie/plugins/logger/history.py                   160    106    34%
enrobie/plugins/logger/params.py                     13      0   100%
enrobie/plugins/logger/plugin.py                     84     60    29%
enrobie/plugins/logger/test/__init__.py               0      0   100%
enrobie/plugins/logger/test/test_history.py          51     41    20%
enrobie/plugins/logger/test/test_plugin.py           53     36    32%
enrobie/plugins/nagios/__init__.py                    3      0   100%
enrobie/plugins/nagios/ainswer.py                    26     20    23%
enrobie/plugins/nagios/current.py                    85     47    45%
enrobie/plugins/nagios/helpers.py                    31     27    13%
enrobie/plugins/nagios/params.py                     23      0   100%
enrobie/plugins/nagios/plugin.py                    102     71    30%
enrobie/plugins/nagios/test/__init__.py               0      0   100%
enrobie/plugins/nagios/test/test_plugin.py           93     62    33%
enrobie/plugins/status/__init__.py                    6      0   100%
enrobie/plugins/status/common.py                     18      3    83%
enrobie/plugins/status/helpers.py                   126    113    10%
enrobie/plugins/status/params.py                     31      0   100%
enrobie/plugins/status/plugin.py                    140    103    26%
enrobie/plugins/status/test/__init__.py               0      0   100%
enrobie/plugins/status/test/test_plugin.py           76     52    32%
enrobie/robie/__init__.py                             4      0   100%
enrobie/robie/addons/__init__.py                      5      0   100%
enrobie/robie/addons/jinja2.py                        9      0   100%
enrobie/robie/addons/logger.py                       72     32    56%
enrobie/robie/addons/queue.py                        34     12    65%
enrobie/robie/addons/test/__init__.py                 0      0   100%
enrobie/robie/addons/test/test_logger.py             43     34    21%
enrobie/robie/addons/test/test_queue.py              27     17    37%
enrobie/robie/childs/__init__.py                      6      0   100%
enrobie/robie/childs/child.py                        38      9    76%
enrobie/robie/childs/client.py                       42     12    71%
enrobie/robie/childs/person.py                       42     21    50%
enrobie/robie/childs/plugin.py                       26     10    62%
enrobie/robie/childs/robie.py                        92     13    86%
enrobie/robie/childs/test/__init__.py                 0      0   100%
enrobie/robie/childs/test/test_child.py               8      6    25%
enrobie/robie/childs/test/test_client.py              2      0   100%
enrobie/robie/childs/test/test_person.py             32     27    16%
enrobie/robie/childs/test/test_plugin.py              2      0   100%
enrobie/robie/childs/test/test_robie.py              15     10    33%
enrobie/robie/common.py                               7      0   100%
enrobie/robie/config.py                             170      0   100%
enrobie/robie/members/__init__.py                     4      0   100%
enrobie/robie/members/clients.py                     47     38    19%
enrobie/robie/members/member.py                     115     69    40%
enrobie/robie/members/plugins.py                     38     29    24%
enrobie/robie/members/test/__init__.py                0      0   100%
enrobie/robie/members/test/test_clients.py           25     19    24%
enrobie/robie/members/test/test_member.py             2      0   100%
enrobie/robie/members/test/test_plugins.py           25     19    24%
enrobie/robie/models/__init__.py                      5      0   100%
enrobie/robie/models/command.py                      11      2    82%
enrobie/robie/models/message.py                      31      3    90%
enrobie/robie/models/robie.py                        43      0   100%
enrobie/robie/models/test/__init__.py                 0      0   100%
enrobie/robie/models/test/test_command.py            19     12    37%
enrobie/robie/models/test/test_message.py            19     12    37%
enrobie/robie/models/test/test_models.py             13      0   100%
enrobie/robie/params/__init__.py                      9      0   100%
enrobie/robie/params/child.py                         8      0   100%
enrobie/robie/params/client.py                        8      0   100%
enrobie/robie/params/common.py                        2      0   100%
enrobie/robie/params/person.py                       16      0   100%
enrobie/robie/params/plugin.py                        8      0   100%
enrobie/robie/params/robie.py                        21      0   100%
enrobie/robie/params/service.py                       7      0   100%
enrobie/robie/robie.py                              105     35    67%
enrobie/robie/service.py                            171    126    26%
enrobie/robie/test/__init__.py                        2      0   100%
enrobie/robie/test/test_config.py                    20      0   100%
enrobie/robie/test/test_robie.py                     55     38    31%
enrobie/robie/test/test_service.py                   64     51    20%
enrobie/robie/threads/__init__.py                     5      0   100%
enrobie/robie/threads/client.py                      18      9    50%
enrobie/robie/threads/plugin.py                      18      9    50%
enrobie/robie/threads/test/__init__.py                0      0   100%
enrobie/robie/threads/test/test_client.py            28     21    25%
enrobie/robie/threads/test/test_plugin.py            28     21    25%
enrobie/robie/threads/test/test_thread.py            25     19    24%
enrobie/robie/threads/thread.py                      97     61    37%
enrobie/utils/__init__.py                             8      0   100%
enrobie/utils/child.py                               18      2    89%
enrobie/utils/importer.py                             6      0   100%
enrobie/utils/param.py                               29     16    45%
enrobie/utils/states.py                              93      6    94%
enrobie/utils/test/__init__.py                        0      0   100%
enrobie/utils/test/test_child.py                     20      6    70%
enrobie/utils/test/test_importer.py                   4      0   100%
enrobie/utils/test/test_param.py                     16     10    38%
enrobie/utils/test/test_states.py                    53      0   100%
enrobie/utils/test/test_thread.py                    18      3    83%
enrobie/utils/thread.py                              14      2    86%
---------------------------------------------------------------------
TOTAL                                              6384   3553    44%

===================================== mypy =====================================
Found 2 errors in 1 file (checked 163 source files)
=========================== short test summary info ============================
FAILED enrobie/plugins/nagios/test/test_plugin.py::test_NagiosPlugin_cover - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
FAILED enrobie/clients/mattermost/test/test_client.py::test_MTMClient_channels - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
FAILED enrobie/__init__.py::mypy-status
FAILED enrobie/plugins/ainswer/plugin.py::mypy
FAILED enrobie/plugins/enhomie/test/test_plugin.py::test_HomiePlugin_cover - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/plugins/logger/test/test_history.py::test_LoggerHistory - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/robie/threads/test/test_thread.py::test_RobieThread_cover - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/clients/mattermost/test/test_client.py::test_MTMClient_command - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/robie/test/test_robie.py::test_Robie_person - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/robie/models/test/test_message.py::test_RobieMessage - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/robie/members/test/test_clients.py::test_RobieClients - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/plugins/ainswer/test/test_ainswer.py::test_AinswerQuestion_prompt[random_privmsg-privmsg-:nick!user@host PRIVMSG ircbot :Hello ircbot] - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/robie/test/test_robie.py::test_Robie - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/clients/irc/test/test_client.py::test_IRCClient_channels - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/robie/members/test/test_clients.py::test_RobieClients_cover - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/plugins/ainswer/test/test_ainswer.py::test_AinswerQuestion_prompt[hubert_privmsg-privmsg-:hubert!hubert@science.com PRIVMSG ircbot :ircbot] - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/robie/test/test_robie.py::test_Robie_jinja2 - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/clients/irc/test/test_client.py::test_IRCClient_message - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/robie/test/test_service.py::test_RobieService_cover - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/plugins/ainswer/test/test_ainswer.py::test_AinswerQuestion_prompt[hubert_chanmsg-chanmsg-:hubert!hubert@science.com PRIVMSG #enrobie :ircbot] - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/robie/test/test_robie.py::test_Robie_printer - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/clients/irc/test/test_client.py::test_IRCClient_command - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/robie/test/test_service.py::test_RobieService_healths - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/plugins/ainswer/test/test_ainswer.py::test_AinswerQuestion_engage - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/robie/threads/test/test_client.py::test_RobieClientThread - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/clients/irc/test/test_client.py::test_IRCClient - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/robie/test/test_service.py::test_RobieService - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/plugins/ainswer/test/test_ainswer.py::test_AinswerQuestion_prompt[random_chanmsg-chanmsg-:nick!user@host PRIVMSG #enrobie :Hello ircbot] - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/robie/childs/test/test_robie.py::test_RobieChilds - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/clients/irc/test/test_client.py::test_IRCClient_compose - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/robie/members/test/test_plugins.py::test_RobiePlugins_cover - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/robie/childs/test/test_child.py::test_RobieChild_cover - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/plugins/nagios/test/test_plugin.py::test_NagiosPlugin - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/clients/irc/test/test_message.py::test_IRCMessage_samples - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/robie/members/test/test_plugins.py::test_RobiePlugins - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/robie/members/test/test_member.py::test_RobieMember_cover - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/clients/irc/test/test_message.py::test_IRCMessage_reply - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/plugins/ainswer/test/test_history.py::test_AinswerHistory - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/robie/threads/test/test_plugin.py::test_RobiePluginThread - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/robie/addons/test/test_logger.py::test_RobieLogger - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/clients/irc/test/test_message.py::test_IRCMessage - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/plugins/ainswer/test/test_history.py::test_AinswerHistory_cover - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/plugins/autonick/test/test_plugin.py::test_AutoNickPlugin - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/robie/addons/test/test_logger.py::test_RobieLogger_cover - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/robie/models/test/test_command.py::test_RobieCommand - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/plugins/logger/test/test_history.py::test_LoggerHistory_cover - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/plugins/autonick/test/test_plugin.py::test_AutoNickPlugin_cover - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/clients/discord/test/test_command.py::test_DSCCommand - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/robie/addons/test/test_logger.py::test_RobieLogger_message - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/plugins/logger/test/test_plugin.py::test_LoggerPlugin_cover - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/clients/mattermost/test/test_client.py::test_MTMClient_compose - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/robie/addons/test/test_queue.py::test_RobieQueue - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/plugins/logger/test/test_plugin.py::test_LoggerPlugin - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/utils/test/test_param.py::test_InvalidParam - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/clients/mattermost/test/test_client.py::test_MTMClient - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/clients/mattermost/test/test_client.py::test_MTMClient_message - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/clients/mattermost/test/test_command.py::test_MTMCommand - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/utils/test/test_thread.py::test_DupliThread_cover - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/clients/discord/test/test_client.py::test_DSCClient_message - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/clients/discord/test/test_client.py::test_DSCClient_command - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/clients/discord/test/test_client.py::test_DSCClient_channels - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/robie/childs/test/test_plugin.py::test_RobiePlugin_cover - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/clients/discord/test/test_client.py::test_DSCClient - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/plugins/status/test/test_plugin.py::test_StatusPlugin_cover - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/clients/discord/test/test_client.py::test_DSCClient_compose - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/plugins/status/test/test_plugin.py::test_StatusPlugin - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/clients/discord/test/test_message.py::test_DSCMessage_reply - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/clients/discord/test/test_message.py::test_DSCMessage - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/clients/discord/test/test_message.py::test_DSCMessage_samples - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/robie/childs/test/test_person.py::test_RobiePerson - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/clients/mattermost/test/test_message.py::test_MTMMessage - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/plugins/enhomie/test/test_plugin.py::test_HomiePlugin - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/robie/childs/test/test_client.py::test_RobieClient_cover - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/clients/mattermost/test/test_message.py::test_MTMMessage_samples - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/clients/mattermost/test/test_message.py::test_MTMMessage_reply - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/plugins/ainswer/test/test_plugin.py::test_AinswerPlugin - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/plugins/ainswer/test/test_plugin.py::test_AinswerPlugin_cover - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/clients/irc/test/test_command.py::test_IRCCommand - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/plugins/autojoin/test/test_plugin.py::test_AutoJoinPlugin_cover - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/plugins/autojoin/test/test_plugin.py::test_AutoJoinPlugin - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
ERROR enrobie/utils/test/test_child.py::test_InvalidChild_cover - TypeError: OpenAIModel.__init__() got an unexpected keyword argument 'api_key'
================== 5 failed, 176 passed, 76 errors in 27.70s ===================
